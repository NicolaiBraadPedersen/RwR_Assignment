##Marginal distributions, comparing our dataset with and without omit.na
#Delete Glucose as variable in framingham, to compare with famingham_g such that the amount of variables are the same
framingham <- framingham %>% select(-c("GLUCOSE"))

framingham_na <- framingham[!complete.cases(framingham),]
framingham = na.omit(framingham)

##We will exclude DIABP AND PREHYP since it is highly correlated with with SYSBP
##PREVCHD OG PREVAP OG PREVMI IS HIGHLY CORRELATED AND THEY PREVAP AND PREVMI CONTAINED IN PRECCHD
framingham <- framingham |> select(-c("DIABP", "PREVHYP", "PREVMI", "PREVAP")) 
framingham_na <- framingham_na |> select(-c("DIABP", "PREVHYP", "PREVMI", "PREVAP")) 
### Removing response variables ###
framingham_plot <- framingham |> select(-c("DEATH","TIMECVD","TIMEDTH","CVD"))
framingham_na_plot <- framingham_na |> select(-c("DEATH","TIMECVD","TIMEDTH","CVD"))
plot <- list()

tmp <- lapply(names(framingham_plot), function(x)
  ggplot(data = framingham[, x, drop = FALSE]) +
    aes_string(x) +
    xlab(x) +
    ylab("")
)
gd <- geom_density(data = framingham_plot, adjust = 2, color = "red", alpha = 0.4)

gb <- geom_bar(data = framingham_plot, aes(y = after_stat(count / sum(count) * 100)),color = "red", alpha = 0.4)

gd_na <- geom_density(data = framingham_na_plot, adjust = 2,color = "blue", alpha = 0.4)

gb_na <- geom_bar(data = framingham_na_plot,aes(y = after_stat(count / sum(count) * 100)),color = "blue", alpha = 0.4)

for (i in 1:length(framingham_plot)){
  col_class <- class(framingham_plot[[i]])[1]
  if (col_class == "factor"){
    p <- tmp[[i]] + gb + gb_na
  } else if (col_class != "factor"){
    p <- tmp[[i]] + gd + gd_na
  }
  plot[[i]] <- p
}

for (i in seq(1, length(framingham_plot), by = 2)) {
  if (i + 1 <= length(plot)) {
    grid.arrange(plot[[i]], plot[[i+1]], ncol = 2)
  } else {
    grid.arrange(plot[[i]], ncol = 1)
  }
}



#Correlation plot

cp <- cor(
  data.matrix(framingham |> select(-c("CVD", "TIMECVD"))), 
  use = "complete.obs", 
  method = "spearman"
)

corrplot::corrplot(
  cp, 
  diag = FALSE, 
  order = "hclust", 
  addrect = 10, 
  tl.srt = 45, 
  tl.col = "black", 
  tl.cex = 0.8
)

# printing marginal asssocations for factor variables with CVD
cols <- c("SEX", "CIGPDAY", "DIABETES", "BPMEDS", "educ", "PREVCHD", "PREVSTRK")

for (x in cols) {
  tab <- table(framingham[[x]], framingham$CVD)
  
  tab_col <- prop.table(tab, margin = 2)
  
  cat("\n\n###", x, " Share of", x, "within each level of CVD\n")
  print(kable(tab_col, digits = 3))
}

##Additive model 
form_add <- CVD ~ CIGPDAY + educ + SEX + HEARTRTE + DIABETES + BMI + SYSBP + TOTCHOL + AGE + PREVCHD + BPMEDS + PREVSTRK

## figure out the order of the variables
glm_add <- glm(form_add, data = framingham, family = binomial)
glm_add_aug <- augment(glm_add, type.residuals = "pearson") |> mutate(.fitted_group = cut(.fitted, quantile(.fitted, probs = seq(5, 95, 1) / 100)))
drop1(glm_add, test = "LRT") |> 
  tidy() |> 
  arrange(p.value, desc(LRT)) |>
  filter(term != "<none>") |>
  select(-AIC) |>
  knitr::kable()
form_add <- CVD ~ SEX + AGE + SYSBP + PREVCHD + PREVSTRK + DIABETES + TOTCHOL + CIGPDAY + BMI + HEARTRTE + educ + BPMEDS

##Now we figure out which link function to use, which ends up being the logit

small_glm_prob <- glm(
    form_add, 
    data = framingham, 
    family = binomial(link = "probit")
)
small_glm_cloglog <- glm(
    form_add, 
    data = framingham, 
    family = binomial(link = "cloglog")
)
small_glm_logit <- glm(
  form_add,
  data = framingham,
  family = binomial(link = "logit")
)


comp_fit <- function(data, mapping, ...) {
    ggplot(data, mapping, ...) + 
        geom_abline(slope = 1, intercept = 0, color = "blue") + 
        geom_point(..., alpha = 0.1, pch = 20) +
        coord_cartesian(xlim = c(0, 0.5), ylim = c(0, 0.5))
}

tibble(
    logit = fitted(small_glm_logit),
    probit = fitted(small_glm_prob),
    cloglog = fitted(small_glm_cloglog),
    ) |> 
  GGally::ggpairs(
    lower = list(continuous = comp_fit),
    diag = list(continuous = "blankDiag")
    )







